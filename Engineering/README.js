// 为什么需要模块化：
// 1、全局变量污染
// 2、依赖混乱

// 模块化的标准：
// 1、CommonJS，简称 CMJ，是社区标准，目前仅支持 node 环境，动态依赖
// 2、ES Module，简称 ESM，ES6 发布的官方标准，目前浏览器和新版本 node 环境均支持，动态、静态依赖

/**
 *              |----- Web API: Web API 是浏览器给开发者提供的一些能力，主要包含 BOM 和 DOM 两部分
 *              |
 * JavaScript --|
 *              |
 *              |----- EcmaScript: ES 制定的是语言标准。有哪些类型、变量怎么定义、判断怎么写、循环怎
 *                                  么写、数组中有哪些方法等语言层面的内容由它规定
 * 
 * 
 *              |----- Node API: Node API 是 Node 环境给开发者提供的一些能力
 *              |
 * NodeJS ------|
 *              |
 *              |----- EcmaScript: ES 制定的是语言标准。有哪些类型、变量怎么定义、判断怎么写、循环怎
 *                                  么写、数组中有哪些方法等语言层面的内容由它规定
 */

// node 天生支持 CommonJS

// CMJ 规范：
// 1、所有的 js 文件均是一个模块，运行的模块为入口模块（文件）
// 2、所以的模块中的全局变量、函数，均不会产生污染
// 3、当一个模块需要提供一些东西给别的函数使用时，使用 module.exports 进行导出操作
// 4、当一个模块需要用到别的模块的东西时，需要使用 require 进行导入操作，路径必须时 ./ 或 ../ 开头
// 5、模块有缓存，第一次运行模块后，导出结果会被缓存，之后再次使用时，使用的是缓存结果

// CommonJS
// 标准类型：社区标准
// 支持环境：node
// 依赖类型：动态依赖
// 导出： module.exports = 导出的值
// 导入： require("模块路径") 函数返回模块导出的值

// ES Module
// 标准类型：官方标准
// 支持环境：node、浏览器
// 依赖类型：静态依赖、动态依赖
// 导出： 1、具名导出（普通导出），可以导出多个 2、默认导出，只能导出一个。详见 export.mjs
// 导入： 针对具名导出和默认导出，有不同的语法。详见 import.mjs

// 注意：
//      1、静态导入的代码必须为代码的顶端，不可以放在代码中间
//      2、静态导入的代码绑定的符号是常量，不可更改

// 什么是包？
// 包（package）是一个或多个 js 模块的集合，它们共同完成某一类功能
// 可以简单的任务每一个工程就是一个包
// 有些包是为了给别人用的，这种包叫第三方库

// 什么是包管理器？
// 包管理器是一个管理包的工具，前端常见的包管理器有 npm，yarn、cnpm、pnpm 等
// 包管理器具备以下能力：
//      1、让开发者可以轻松的下载包
//      2、让开发者可以轻松的升级和卸载包
//      3、能够自动管理包的依赖

// 什么是cli
// cli 是一个命令行工具，它提供一个终端命令，通过该命令可以完成一些功能

// node 查找包的顺序
// require("a")
// 1、查找是否有内置模块 a
// 2、查找当前目录的 node_module 中是否有 a
// 3、依次查找上级目录的 node_module 中是否有 a，直到根目录